// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  Beginner
  Intermediate
  Advanced
}

model User {
  id               String      @id @default(cuid())
  clerkId          String      @unique
  email            String      @unique
  username         String?
  imageURL         String
  decks            Deck[]
  lastStudiedDecks Deck[]      @relation("LastStudiedDecks")
  savedDecks       Deck[]      @relation("SavedDecks")
  score            Int         @default(0)
  guides           Guide[]
  deckScores       DeckScore[]
}

model Deck {
  id          String      @id @default(cuid())
  title       String      @db.VarChar(255)
  description String?     @db.VarChar(500)
  difficulty  Difficulty  @default(Beginner)
  createdOn   DateTime    @default(now())
  updatedOn   DateTime    @updatedAt
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  cards       Card[]
  students    User[]      @relation("LastStudiedDecks")
  savedBy     User[]      @relation("SavedDecks")
  isPublic    Boolean
  isCopy      Boolean
  guide       Guide?
  deckScores  DeckScore[]
}

model Card {
  // id       String @id @default(cuid())
  id       Int    @id @default(autoincrement())
  question String @db.VarChar(500)
  answer   String @db.VarChar(500)
  deckId   String
  deck     Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
}

model DeckScore {
  id     String @id @default(cuid())
  score  Int    @default(0)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String

  @@unique([userId, deckId]) // Composite unique constraint on userId and deckId
}

model Guide {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  content   Json
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt
  deckId    String?  @unique
  deck      Deck?    @relation(fields: [deckId], references: [id], onDelete: SetNull)
  imageURL  String?
}
